---
import WordIntroduction from '@/components/WordIntroduction.astro'
import WordMeaning from '@/components/WordMeaning.astro'
import Book from '@/icons/Book.astro'
import ExternalLink from '@/icons/ExternalLink.astro'
import Glass from '@/icons/Glass.astro'
import Layout from '@/layouts/Layout.astro'
import { fetchMeaning, type SuccessResponse } from '@/service/fetchMeaning'
import { isFailureResponse } from '@/utils/isFailureResponse'

Astro.response.headers.set(
  'Cache-Control',
  `public, max-age=${60 * 10}, s-maxage=${60 * 60 * 24 * 30}`
)

const query = Astro.url.searchParams.get('query') || ''
let data: SuccessResponse[number] | null = null
let error: string | null = null
let audioUrl = ''

if (query) {
  try {
    const res = await fetchMeaning(query)
    data = res[0]
  } catch (e) {
    if (isFailureResponse(e)) {
      error = e.message
    } else {
      error = 'Something went wrong. Please try again later.'
    }
  }
}

if (data) {
  audioUrl =
    data.phonetics.find((item) => item.audio && item.audio?.length > 0)
      ?.audio || ''
}
---

<Layout title="Wordstock">
  <header>
    <nav>
      <a aria-label="Home" class="block w-fit" href="/">
        <Book aria-hidden="true" class="h-6 w-6 dark:text-gray-100" />
      </a>
      <!-- TODO: Add dark mode toggle -->
    </nav>
  </header>
  <main class="mt-4">
    <form>
      <div class="relative">
        <input
          class="border w-full text-sm rounded-lg py-2.5 px-4 pr-10 bg-gray-100 focus-visible:ring-accent dark:bg-stone-900 outline-none focus-visible:ring-2 dark:border-gray-800 dark:text-gray-300 autofill:bg-gray-100 dark:autofill:bg-stone-900"
          id="query"
          name="query"
          placeholder="Enter a word"
          type="text"
          value={query}
        />
        <label for="query" class="sr-only">Enter a word</label>
        <button
          aria-label="search"
          class="h-4 w-4 absolute right-4 top-3 text-accent"
          type="submit"
        >
          <Glass aria-hidden="true" />
        </button>
      </div>
    </form>

    {
      error ? (
        <span class="text-red-500 mt-4 block" role="alert">
          {error}
        </span>
      ) : null
    }

    {
      data ? (
        <>
          <WordIntroduction
            audioUrl={audioUrl}
            phonetic={data.phonetic}
            word={query}
          />

          <ul class="space-y-8 my-8">
            {data.meanings.map((item) => (
              <li>
                <WordMeaning
                  definitions={item.definitions}
                  partOfSpeech={item.partOfSpeech}
                  synonyms={item.synonyms}
                />
              </li>
            ))}
          </ul>

          {data.sourceUrls?.length > 0 ? (
            <>
              <div class="h-0.5 w-full bg-gray-100 dark:bg-gray-800 rounded-full" />
              <h2 class="text-gray-500 dark:text-gray-400 mt-8" id="source">
                Source
              </h2>
              <ul
                aria-labelledby="source"
                class="list-disc list-outside mt-4 space-y-4"
              >
                {data.sourceUrls.map((item) => (
                  <li class="ml-4 sm:ml-8 marker:text-accent text-gray-700 dark:text-gray-300">
                    <span class="flex items-center gap-2">
                      {item}{' '}
                      <a
                        aria-label="Go to source"
                        href={item}
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        <ExternalLink aria-hidden="true" class="h-4 w-4" />
                      </a>
                    </span>
                  </li>
                ))}
              </ul>
            </>
          ) : null}
        </>
      ) : null
    }
  </main>
</Layout>
